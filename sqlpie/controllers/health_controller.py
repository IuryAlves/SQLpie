# -*- coding: utf-8 -*-
"""

SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.

"""

from flask import Response
from flask import render_template
import json
import sqlpie
import os

class HealthController(object):

    @staticmethod
    def ping(request):
        resp = Response(json.dumps({"ping":"pong"}, sort_keys=True, indent=4, separators=(',', ': ')), status=200, mimetype='application/json')
        return resp

    @staticmethod
    def docs(request):
        vars = {}
        docs = {}
        docs_dir = os.path.dirname(__file__) + '/../../docs/'
        documentation_files = [f for f in os.listdir(docs_dir) if os.path.isfile(os.path.join(docs_dir, f)) \
            and f not in [".DS_Store", "CHANGES", "TO-DO"]]
        for i, df in enumerate(documentation_files):
            f = open(docs_dir + df,"rb").read()
            t = f.decode("utf-8")
            t = t.split("==============================================================")[2].strip()
            if "[this file was auto-generated by `scripts/update_docs.py`]" in t:
                t = t.split("[this file was auto-generated by `scripts/update_docs.py`]")[1].strip()

            docs[df.replace(" ","_").replace(".txt","")] = (df, t)
        vars["keys"] = sorted(docs.keys())
        vars["docs"] = docs
        vars["database_schema"] = sqlpie.Schema.get()
        return render_template('docs.html', vars=vars)

    @staticmethod
    def stats(request):
        vars = {}
        vars["database_schema"] = sqlpie.Schema.get()
        vars["database_name"] = sqlpie.Health.db_name()
        vars["num_docs"] = sqlpie.Document.stats()
        vars["num_observations"] = sqlpie.Observation.stats()
        vars["cachebuckets"] = sqlpie.global_cache.keys()
        vars["sqlpie_env"] = os.environ.get('sqlpie_env')
        vars["sqlpie_debug"] = os.environ.get('sqlpie_debug', False)
        resp = Response(json.dumps(vars, sort_keys=True, indent=4, separators=(',', ': ')), status=200, mimetype='application/json')
        return resp
