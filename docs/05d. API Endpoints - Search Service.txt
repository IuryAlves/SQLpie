==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 André Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  SEARCH SERVICE

#
# API ENDPOINT
#

/service/index : Indexes all documents that haven't been indexed yet.

        NOTES:
            - The options file specifies which stopword files (if any) should be used.
            - By default, the `data/english.stop` stopworld file is loaded.
            - If a `latitude` and `longitude` attributes are provided, they're stored as coordinates.

        JSON_OBJECT PARAMS:
            option->rebuild : if used, rebuilds the entire index.

        EXAMPLE REQUEST:

            # Simple indexing call to index only new documents

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_index({})

            # With option to rebuild the entire index.

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_index({"options":{"rebuild":True}})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/search : Searches for indexed documents using Boolean/Vector search. GeoSearch and TagCloud also available.

        NOTES:
            - The search grammar should be similar to most full text search engines (Google, Lucene, etc..).
            - The search query parser supports: 'and', 'or', implicit 'and', and not-word operators, parenthesis, quoted strings, field searches, and wildcards.
            - There are essentially 3 types of search: standard search, geosearch, and tagcloud search

        JSON_OBJECT PARAMS:
            q           : search query expression (required)
            num         : number of results to return (optional, defaults to 10)
            start       : offset of where to start in the result set (optional)
            georadius   : radius for the geosearch (only applicable if geotarget is also provided)
            geotarget   : target lat/long for the geosearch (only applicable if georadius is also provided)
            geosortby   : sort geosearch results by "relevance" or by "distance" (default is "distance")
            tagcloud    : return tagcloud results either by "relevance" or by "frequency" (optional)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_search({"q":"apple"})

            Other search query expression examples:

            {"q":'"Iron Eagle"'}
            {"q":'"Iron Eagle" _bucket:movies'}
            {"q":"Iron _bucket:movies"}
            {"q":"Iron -man _bucket:movies"}
            {"q":"(eagle OR man) _bucket:movies"}
            {"q":"Iron AND man _bucket:movies"}
            {"q":"(man) _bucket:movies"}
            {"q":"(iron) _bucket:movies"}
            {"q":"(iron OR eagle) -man _bucket:movies"}
            {"q":"name:terminator _bucket:movies"}
            {"q":'(name:terminator) OR "star wars" _bucket:movies'}
            {"q":"termin* or goon* _bucket:movies"}
            {"q":'ter* or "goonies" _bucket:movies'}
            {"q":"name:Harry or name:terminator _bucket:movies"}
            {"q":"the _bucket:movies"}
            {"q":"the matrix _bucket:movies"}
            {"q":"harry _bucket:movies","num":1,"start":1}
            {"q":"harry _bucket:movies","num":2,"start":2}
            {"q":"harry _bucket:movies","num":2,"start":1}
            # unicode case
            {"q":"Antonia's or Misérables or naïve or café _bucket:tests"}
            # stem case
            {"q":"Antonia _bucket:tests"}
            {"q":'"Eagle of Iron" _bucket:movies'}
            {"q":"_bucket:orders"}
            {"q":'total:=250 _bucket:orders'}
            {"q":"total:>250 _bucket:orders"}
            {"q":"total:>=300 _bucket:orders"}
            {"q":"total:<250 _bucket:orders"}
            {"q":"total:<=250 _bucket:orders"}
            {"q":"total:>=250&<=300 _bucket:orders"}
            {"q":"total:>200&<300 _bucket:orders"}
            {"q":"shipping.state:pa _bucket:orders"}
            {"q":"shipping.state:ca _bucket:orders"}
            {"q":"shipping.state:ca billing.city:florida _bucket:orders"}
            {"q":".city:pittsburgh _bucket:orders"}
            {"q":".cost:>50 _bucket:orders"}
            {"q":".cost:>84.1&<84.9 _bucket:orders"}
            {"q":'.city:"los angeles" _bucket:orders'}
            {"q":"order_date:>07/01/2015 _bucket:orders"}
            {"q":"order_date:>07/01/2015&<11/01/2015 _bucket:orders"}
            {"q":"order_date:<11/01/2015 _bucket:orders"}
            {"q":"shipping.shipping_date:Oct/02/2015 _bucket:orders"}
            {"q":"shipping.shipping_date:=Oct/02/2015 _bucket:orders"}
            {"q":".shipping_date:=Oct/02/2015 _bucket:orders"}
            {"q":".shipping_date:>=Oct/02/2015&<=Oct/02/2015 _bucket:orders"}
            {"q":"shipping_date:=Oct/02/2015 _bucket:orders"}
            {"q":"total:>-250 _bucket:orders"}
            {"q":"total:>-250&<=50 _bucket:orders"}
            {"q":".shipped:=true _bucket:orders"}
            {"q":".shipped:=false _bucket:orders"}

            Geo Search:
            -----------

            GeoSearch uses 2 search params:
                - `georadius` (numeric) and `geotarget` in either a specific lat,long or field:value, which is parsed to lat/long.
                - `geosortby` is an optional field, which can be either relevance or distance (the default).
                -  GeoSearch works by looking for 2 specific fields in the documents: `latitude` and `longitude`.

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.service_search({"q":"_bucket:employees","georadius":20,"geotarget":"40.4405556,-79.9961111"})

                # when sorted by relevance...

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.service_search({"q":"john _bucket:employees", "georadius":20, "geotarget":"40.4405556,-79.9961111", "geosortby":"relevance"})

            Tagcloud Search:
            -----------------

            Returns a list of common terms and phrases.
            Instead of documents, it returns: the terms, num_docs, term_count, relevance
            Results are sorted in 2 ways: by term relevance, by term frequency

                # Tagcloud by term relevance

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.service_search({"q":"john _bucket:employees", "tagcloud":"relevance"})

                # Tagcloud by term frequency

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.service_search({"q":"john _bucket:employees", "tagcloud":"frequency"})

            The Tagcloud results is a list of terms.
            For each term, its term_count, _score, and num_docs are provided.

        RESPONSE:

            [TBD - Yet To Be Documented]
            TODO: Explain _score field that is returned for each document in the standard search results.
            TODO: Explain _distance and _score fields that are returned for each document in the geosearch results.
            TODO: Explain _ratio and _score fields that are returned for each document in the tagcloud search results.

        