==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================


== About the API

    * All API ENDPOINT expect HTTP POST request.
    * 2 API ENDPOINTS (/ping and /stats) can also be accessed using HTTP GET.
    * JSON objects are expected to be passed in the requests that need parameters.
    * API responses are JSON objects too.


== List of available API ENDPOINTS.

    * /caching/add : Adds a key entry to an existing cache structure.
    * /caching/destroy : Destroys the entire caching object.
    * /caching/flush : Persists cache in-memory data changes to the database.
    * /caching/get : Returns the value of a cached key
    * /caching/initialize : Initializes a caching structure
    * /caching/put : Adds a key/value pair to an existing cache structure.
    * /caching/remove : Removes a key from a cache.
    * /caching/reset : Deletes ALL non-system caches in the database.
    * /document/get <json_object> : Returns a single JSON document for a given identifier (ie. the value of the _id field)
    * /document/put <json_object> : Adds one or more JSON documents to the SQLpie storage.
    * /document/remove <json_object> : Deletes a single JSON document for a given identifier (ie. the value of the _id field)
    * /document/reset : Deletes ALL documents in the database.
    * /observation/get :  Returns JSON observations for a given lookup query 
    * /observation/put <json_object> : Adds one or more JSON observations to the SQLpie storage.
    * /observation/remove <json_object> : Deletes observations based on a specific selection criteria.
    * /observation/reset : Deletes ALL observations in the database.
    * /ping : Health check that sends a simple test request to the server.
    * /service/classifier/init : Initializes a new classifier model.
    * /service/classifier/clear : Removes all training data from a given classifier.
    * /service/classifier/predict : Predicts the best classification label for a given document in a given model.
    * /service/classifier/predictions : Returns all classification scores for all labels for a given subject.
    * /service/classifier/reset : Deletes ALL classification models in the database.
    * /service/classifier/train : Trains a specific classifier model.        
    * /service/index : Indexes all documents that haven't been indexed yet.
    * /service/matching/ : Finds documents that match a given document.
    * /service/collaborative/recommendation : Recommends subjects for an object, or objects for a subject.
    * /service/search : Searches for indexed documents using Boolean/Vector search. GeoSearch and TagCloud also available.
    * /service/collaborative/similarity : Finds similar subjects for a subject, or similar objects for an object.
    * /service/summarization : Summarizes a document or document snippet, identifying keywords and entities.
    * /stats : Shows internal state of the server installation and values of key environment variables.


== Using the JSON API.

    Optionally, you can also call the API directly.

    Two API calls (/ping and /stats) can be accessed using the HTTP GET method. e.g.

    curl -i -X GET http://localhost:5000/ping
    
    All other API calls require the HTTP POST method. e.g.
                
    curl -i -H "Content-Type: application/json" -X POST -d '{"documents":{"_id":"001", "_bucket":"employees","name":"John","location":"Pittsburgh, PA","title":"CEO"}}' http://localhost:5000/document/put
    

== API Requests and Responses

    * All request and response objects are JSON objects.

    * All responses will have a key named "success", which is True for successful responses,and False when there's an error.

    * If there's an error in the response, a key named "err" will contain the error message.

    * If the API URL is not working due to code or db problems, the following message will appear.
        e.g. {u'URLError': u'[Errno 61] Connection refused'}

    * If the API returns a bad request error, one generated by the application, the following message will appear.
        e.g. {'http_error_code': 400, u'success': False, u'err': u'Record Not Found.'}

