==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  CACHING SERVICE

#
# API ENDPOINT
#

/caching/initialize : Initializes a caching structure

        NOTES:
            - This was originally designed as a Thread safe cache class.
            - Caching is eventually consistent, if flushed to the database.
            - The application itself uses some internal caching structures (e.g. _STOPWORDS)

        JSON_OBJECT PARAMS:
            bucket      : name to assign to the caching bucket.
            capacity    : max number of entries to store in this cache.
            auto_flush  : if True, automatically flushes the cache to the database.

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_initialize({"bucket":"stopwords", "capacity":"300", "auto_flush":False})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/caching/add : Adds a key entry to an existing cache structure.

        NOTES:
            - This is essentially a shortcut to the /caching/put service, caching just the key.

        JSON_OBJECT PARAMS:
            bucket      : name of the caching bucket to use
            key         : key to cache
            expires_at  : number of seconds to keep this key in the cache

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_add({"bucket":"countries", "key":"canada"})

            # Set key that expires in 30 seconds
            response = sqlrc.caching_add({"bucket":"online_users", "key":"3432", "expires_at":30})

        RESPONSE:

            [TBD - Yet To Be Documented]
            # {
            #     "success": True
            # }

        
#
# API ENDPOINT
#

/caching/put : Adds a key/value pair to an existing cache structure.

        NOTES:
            - A key can be removed, by forcing it to expire.

        JSON_OBJECT PARAMS:
            bucket      : name of the caching bucket to use
            key         : key to cache
            value       : value to cache
            expires_at  : number of seconds to keep this key in the cache

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_put("bucket":"stopwords", "key":"the", "value":True, "expires_at":10})

            # For a key expiration by setting its expires_at to a negative number.
            response = sqlrc.caching_put("bucket":"stopwords", "key":"the", "value":True, "expires_at":-1})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/caching/get : Returns the value of a cached key

        NOTES:
            - If a key doesn't exist, it should return a value of None.
            - Trying to access an empty cache should return an error.

        JSON_OBJECT PARAMS:
            bucket  : Cache bucket to query.
            key     : Key being queried.


        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_get({"bucket":"stopwords", "key":"the"})

        RESPONSE:

            [TBD - Yet To Be Documented]
            # {
            #     "success" : True,
            #     "key" : "the",
            #     "value" : True
            # }

        
#
# API ENDPOINT
#

/caching/remove : Removes a key from a cache.

        NOTES:
            [TBD - Yet To Be Documented]

        JSON_OBJECT PARAMS:
            bucket  : caching bucket that contains the key to be deleted
            key     : key to be deleted (optional, if not provided, all keys in the bucket are deleted)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_remove({"bucket":"_STOPWORDS", "key":"the"})

            # Deleting all keys
            response = sqlrc.caching_remove({"bucket":"_STOPWORDS"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/caching/flush : Persists cache in-memory data changes to the database.

        NOTES:
            [TBD - Yet To Be Documented]

        JSON_OBJECT PARAMS:
            bucket  : caching bucket to flush to the database

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_flush({"bucket":"stopwords"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/caching/reset : Deletes ALL non-system caches in the database.

        NOTES:
            - This is a very damaging call so it requires a lot of caution (So, have CAUTION!!!)

        JSON_OBJECT PARAMS:
            none

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_reset({})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/caching/destroy : Destroys the entire caching object.

        NOTES:
            [TBD - Yet To Be Documented]

        JSON_OBJECT PARAMS:
            bucket  : name of the bucket to be destroyed.

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.caching_destroy({"bucket":"stopwords"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        