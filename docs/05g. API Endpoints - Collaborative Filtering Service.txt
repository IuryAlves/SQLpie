==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  COLLABORATIVE FILTERING SERVICE

#
# API ENDPOINT
#

/service/collaborative/recommendation : Recommends subjects for an object, or objects for a subject.

        NOTES:
            - The recommendations are based on the relationships recorded in the observations.
            - Two computing metrics are available: pearson and manhattan
            - You have to provide either a subject_id or an object_id. The one left out is going to be recommended.

        JSON_OBJECT PARAMS:
            subject_bucket  : (required)
            subject_id      : (require only if an object_id is not provided)
            predicate       : predicate of the observations to be analyzed.
            object_bucket   : (required)
            object_id       : (required only if a subject_id is not provided)
            metric          : metric to use: pearson, or manhattan (optional, defaults to pearson)


        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")

            # recommendations based on object_ids "liked" by all subject_ids
            # what object_id should be recommended for this subject_id next? - pearson example

            response = sqlrc.service_recommend({"subject_bucket":"candidates", "subject_id":"001", "predicate":"likes", "object_bucket":"jobs"})
            # [{'bucket_id': 'jobs', '_score': 3.0, 'document_id': 'Python Engineer'}, {'bucket_id': 'jobs', '_score': 0.0, 'document_id': 'Java Engineer II'}]


            # recommendations based on subject_ids "who liked" these object_ids
            # what subject_id should be recommended for this object_id next - manhattan example

            response = sqlrc.service_recommend({"subject_bucket":"candidates", "predicate":"likes", "object_bucket":"jobs", "object_id":"Java Software Engineer", "metric":"manhattan"})
            # [{'bucket_id': 'candidates', '_score': 1.125, 'document_id': '009'}]


        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/collaborative/similarity : Finds similar subjects for a subject, or similar objects for an object.

        NOTES:
            - The similarities are based on the relationships recorded in the observations.
            - Two computing metrics are available: pearson and manhattan
            - You have to provide either a subject_id or an object_id.

        JSON_OBJECT PARAMS:
            subject_bucket  : (required)
            subject_id      : (require only if an object_id is not provided)
            predicate       : predicate of the observations to be analyzed.
            object_bucket   : (required)
            object_id       : (required only if a subject_id is not provided)
            metric          : metric to use: pearson, or manhattan (optional, defaults to pearson)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")

            # finds subject_ids that are similar to this subject_id in terms of "liking" these "objects"

            response = sqlrc.service_similarity({"subject_bucket":"candidates", "subject_id":"001", "predicate":"likes", "object_bucket":"jobs", "method":"manhattan"})
            # [{u'bucket_id': u'candidates', u'num': 6, u'_score': 0.03288, u'document_id': u'003'}, {u'bucket_id': u'candidates', u'num': 1, u'_score': 0.0, u'document_id': u'009'}]


            # finds object_ids that are similar to this object_id in terms of being "liked" by these "subjects"

            response = sqlrc.service_similarity({"subject_bucket":"candidates", "predicate":"likes", "object_bucket":"jobs", "object_id":"MySQL DBA", "method":"pearson"})
            #[{u'bucket_id': u'jobs', u'num': 3, u'_score': 0.944911, u'document_id': u'Data Scientist'}, {u'bucket_id': u'jobs', u'num': 3, u'_score': 0.0, u'document_id': u'Oracle DBA'}, {u'bucket_id': u'jobs', u'num': 1, u'_score': 0.0, u'document_id': u'MySQL SysAdmin'}]

        RESPONSE:

            [TBD - Yet To Be Documented]

        