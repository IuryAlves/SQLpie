==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  DOCUMENTS

#
# API ENDPOINT
#

/document/put <json_object> : Adds one or more JSON documents to the SQLpie storage.

        NOTES:
            - Add one or multiple documents in a single call.
            - If an "_id" field is not provided for a document, a unique identifier is created and assigned to it.
            - If a "_bucket field is not provided for a document, the document will be assigned to the "DEFAULT" bucket.
            - If a given "_id" already exists, the new document replaces the old one.
            - An optional parser option can be provide. See section below.

        JSON_OBJECT PARAMS:
            documents        : single object or a list of objects (required)
            options->parsers : name of parsers to use (optional)


        EXAMPLE REQUEST:

            Using the SQLpie shell:

                SQLpie # /document/put {"documents":{"_id":"001", "_bucket":"employees","name":"John"}}

            Using a command line tool:

                curl -i -H "Content-Type: application/json" -X POST -d '{"documents":{"_id":"001", "_bucket":"employees","name":"John","location":"Pittsburgh, PA","title":"CEO"}}' http://localhost:5000/document/put

            Using the SQLpie client:

                # Single document example:

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.document_put({"documents":{"_id":"001", "_bucket":"employees","name":"John"}})

                # Multi-document example:

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.document_put({"documents":[{"_id":"001", "_bucket":"employees","name":"John","location":"Pittsburgh, PA","title":"CEO"},{"_id":"002", "_bucket":"employees","name":"Peter","location":"Cleveland, OH","title":"CFO"}]})

        RESPONSE:

            [TBD - Yet To Be Documented]

        DOCUMENT PARSERS:
        -----------------

            - Parsers are used to modify/remove/create fields in a document as they're loaded.
            - Each parser lives in its own file in the /sqlpie/parsers directory.
            - Files can be hot swapped/updated without restarting the server.
            - The file name is what is passed as a parameter in the API call.
            - Inside the file, a parser function is used to transform the document's json object.
            - After any changes are made to the document, it is expected that a new document is returned to be indexed.
            - The function name that is called by the indexing engine is "parse".
            - The available examples, show that you can test the function by directly calling this script.
                e.g. python sqlpie/parsers/location.py

            Example showing how to use parsers through the API:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.document_put({"documents":{"_id":"001", "_bucket":"employees","name":"John","location":"Pittsburgh, PA"}, "options":{"parsers":["location"]}})

        
#
# API ENDPOINT
#

/document/get <json_object> : Returns a single JSON document for a given identifier (ie. the value of the _id field)

        JSON_OBJECT PARAMS:
            _id     : document identifier (required)
            _bucket : document bucket (optional, defaults to the "DEFAULT" bucket)

        EXAMPLE REQUEST:

            Using a command line tool:

                curl -i -H "Content-Type: application/json" -X POST -d '{"_id":2}' http://localhost:5000/document/get

            Using the SQLpie client:

                import sqlpie_client
                sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
                response = sqlrc.document_get({"_id":"006", "_bucket":"customers"})

        RESPONSE:

            [TBD - Yet To Be Documented]

            {"document":{"_id":"","_bucket":"",...}}

        
#
# API ENDPOINT
#

/document/remove <json_object> : Deletes a single JSON document for a given identifier (ie. the value of the _id field)

        JSON_OBJECT PARAMS:
            _id     : document identifier (required)
            _bucket : document bucket (optional, defaults to the "DEFAULT" bucket)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.document_remove({"_id":"006e", "_bucket":"customers"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/document/reset : Deletes ALL documents in the database.

        NOTES:
            - This is a very damaging call so it requires a lot of caution (So, have CAUTION!!!)

        JSON_OBJECT PARAMS:
            none

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.document_reset({})

        RESPONSE:

            [TBD - Yet To Be Documented]

        