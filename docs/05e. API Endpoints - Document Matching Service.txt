==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  DOCUMENT MATCHING SERVICE

#
# API ENDPOINT
#

/service/matching/ : Finds documents that match a given document.

        NOTES:
            - Document matching is essentially a search query where the search terms come from a document.
            - The document to be analyzed can come from the storage or be provided in the request itself.
            - To choose a document, either use the bucket/document_id or the document params.
            - The response that comes back contains a list of matching documents, each with a _store field.
            - If multiple results are requested, the rankings are stored as observations.

        JSON_OBJECT PARAMS:
            bucket          : bucket of the document(s) to be analyzed
            document_id     : identifier of the document to be analyzed (requires bucket)
            document        : to be used alternatively, if the bucket/document_id is not provided
            search_bucket   : bucket where the search will take place (required)
            num_results     : max number of results to return (optional, defaults to 1)
            filter_query    : query that will run on the search bucket to limit the scope of the matching (optional)


        EXAMPLE REQUEST:

            # Find documents in the `jobs` search bucket that are good matches to the bucket/document_id document

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"bucket":"candidates", "document_id":"c003", "search_bucket":"jobs"})

            # Find documents in the `jobs` search bucket, and brings back the top 5 results

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"bucket":"candidates", "document_id":"c003", "search_bucket":"jobs", "num_results":5})

            # Matches documents, but limits the scope of the search_bucket to a specific query

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"bucket":"candidates", "document_id":"c003", "search_bucket":"jobs", "filter_query":"state:PA"})

            # Loops through all documents in a bucket, and returns top 5 matches for each one.
            # In cases like this, results are stored as observations using a specific output_predicate
            # The default naming convention is "match_<bucket>_<search_bucket>". e.g. match_candidates_jobs
            # Those results need to be retrieved using `observation/get`

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"bucket":"candidates", "search_bucket":"jobs", "num_results":5})

            # To save the output with a custom predicate name.

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"bucket":"candidates", "search_bucket":"jobs", "num_results":5, "output_predicate":"monthly_report"})

            predicate = response["output_predicate"]
            results = sqlrc.observation_get({"predicate":predicate})

            # Find documents in the `jobs` search bucket that are good matches to the provided document

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_matching({"document":{"name":"John", "resume":"Software Engineer with 5 years of Python experience."}, "search_bucket":"jobs"})


        RESPONSE:

            [TBD - Yet To Be Documented]
            TODO: document total_matches, output_predicate, _score

        