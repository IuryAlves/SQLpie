==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 AndrÃ© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  CLASSIFICATION SERVICE

#
# API ENDPOINT
#

/service/classifier/init : Initializes a new classifier model.

        NOTES:
            - This request creates the proper data structures to start collecting the data.
            - Classifications are computed based on observations.
            - For example, observations that were created for every news article tagged by people.

        JSON_OBJECT PARAMS:
            model           : name of the model. (required)
            subject_bucket  : bucket name for the subject observations that needs to be classified. (required)
            predicate       : `predicate` name for the subject observations that needs to be classified. (required)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_classifier({"model":"tagged_articles", "subject_bucket":"people", "predicate":"tags"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/classifier/train : Trains a specific classifier model.

        NOTES:
            - Trainning means reading new observations linked to a model, and using them to extend the model.
            - Documents associated with the observation subjects are used for the classification.
            - More specifically, the fields (i.e. features) listed in the request.

        JSON_OBJECT PARAMS:
            model       : name of the classifier model. (required)
            features    : list of document features to use in the training. (required)
            options->use_numbers_as_weights : if set to True, causes the numeric weights to be applied (optional)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_classifier_train({"model":"tagged_articles", "features":["title","source"]})

            Or, if you want to use the observation values as weights.

            response = sqlrc.service_classifier_train({"model":"tagged_articles", "features":["title","source"], "options":{"use_numbers_as_weights":True}})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/classifier/clear : Removes all training data from a given classifier.

        NOTES:
            [TBD - Yet To Be Documented]

        JSON_OBJECT PARAMS:
            model   : name of the model to clear

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_classifier_clear({"model":"tagged_articles"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/classifier/reset : Deletes ALL classification models in the database.

        NOTES:
            - This is a very damaging call so it requires a lot of caution (So, have CAUTION!!!)

        JSON_OBJECT PARAMS:
            none

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_classifier_reset({})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/service/classifier/predict : Predicts the best classification label for a given document in a given model.

        NOTES:
            - It returns a label, a score and the score's ratio (i.e. that score's piece of the whole pie of labels).
            - If a specific label is not provided to be researched, the best label is returned.

        JSON_OBJECT PARAMS:
            model       : name of the model. (required)
            subject_id  : subject in the model that will be the context for the classification. (required)
            document    : new document to be classified. (required)
            label       : specific label to be queried (optional)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")

            # Returns best classification prediction (label)

            response = sqlrc.service_classifier_predict({"model":"tagged_articles", "subject_id":"003", "document":{"title":"OpenAI, will be established as a nonprofit, and will be based in San Francisco", "source":"techcrunch"}})
            # {u'_score': 26.426909, u'_ratio': 81.469171, u'label': u'AI'}

            # Returns classification prediction for a given label

            response = sqlrc.service_classifier_predict({"model":"tagged_articles", "subject_id":"001", "label":"Innovation", "document":{"title":"Research Center OpenAI, will be established as a nonprofit, and will be based in San Francisco", "source":"techcrunch"}})
            # {u'_score': 4.774199, u'_ratio': 14.717953, u'label': u'Innovation'}


        RESPONSE:

            [TBD - Yet To Be Documented]
            # TODO: document when the response field are of type 'None'

        
#
# API ENDPOINT
#

/service/classifier/predictions : Returns all classification scores for all labels for a given subject.

        NOTES:
            - The response is a sorted list of labels and scores that best classify a document for a given subject.

        JSON_OBJECT PARAMS:
            model       : name of the model. (required)
            subject_id  : subject in the model that will be the context for the classification. (required)
            document    : new document to be classified. (required)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.service_classifier_predictions({"model":"tagged_articles", "subject_id":"001", "document":{"title":"Research Center OpenAI, will be established as a nonprofit, and will be based in San Francisco", "source":"techcrunch"}})

            # [{u'_score': 26.426909, u'_ratio': 81.469171, u'label': u'AI'}, {u'_score': 4.774199, u'_ratio': 14.717953, u'label': u'Innovation'}, {u'_score': 0.440237, u'_ratio': 1.357167, u'label': u'Tech'}, {u'_score': 0.2, u'_ratio': 0.616562, u'label': u'Politics'}, {u'_score': 0.158974, u'_ratio': 0.490088, u'label': u'Google'}, {u'_score': 0.158974, u'_ratio': 0.490088, u'label': u'Science'}, {u'_score': 0.105983, u'_ratio': 0.326725, u'label': u'Gaming'}, {u'_score': 0.105983, u'_ratio': 0.326725, u'label': u'Games'}, {u'_score': 0.066667, u'_ratio': 0.205521, u'label': u'Global Warming'}]

        RESPONSE:

            [TBD - Yet To Be Documented]

        