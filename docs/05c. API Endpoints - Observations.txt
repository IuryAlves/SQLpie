==============================================================
SQLpie License (MIT License)
Copyright (c) 2011-2016 Andr√© Lessa, http://sqlpie.com
See LICENSE file.
==============================================================

[this file was auto-generated by `scripts/update_docs.py`]

==  OBSERVATIONS

#
# API ENDPOINT
#

/observation/put <json_object> : Adds one or more JSON observations to the SQLpie storage.

        NOTES:
            - Add one or multiple observations in a single call.
            - Submit either single object or a list of objects.

        JSON_OBJECT PARAMS (for each observation):
            subject_bucket  : bucket name of the observation's subject (optional, defaults to "DEFAULT")
            subject_id      : subject's document identifier (required)
            predicate       : predicate of the observation (required)
            object_bucket   : bucket name of the observation's object (optional, defaults to "DEFAULT")
            object_id       : object's document identifier (required)
            value           : value of the observation (optional)
            timestamp       : timestamp of the observation (optional, defaults to current timestamp)

            The predicate value can be one of the following types:

            Integer:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":3}
            Float:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":5.34}
            Boolean:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":True}
            List:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":["Action","Drama"]}
            None:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":None}
            String:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":"Very Good"}
            Object:
            e.g. {"subject_bucket":"people", "object_bucket":"docs", "subject_id":"001", "predicate":"likes", "object_id":"Document001", "value":{"expired":True}}


        EXAMPLE REQUEST:

            # Single Observation

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_put({"subject_bucket":"customers", "object_bucket":"products", "subject_id":"001", "predicate":"likes", "object_id":"Prod002", "value":5, "timestamp":972654989})

            # Multiple Observations

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            observations = []
            observations.append({"subject_bucket":"customers", "object_bucket":"products", "subject_id":"001", "predicate":"likes", "object_id":"Prod001", "value":3, "timestamp":972654989})
            observations.append({"subject_bucket":"customers", "object_bucket":"products", "subject_id":"001", "predicate":"likes", "object_id":"Prod002", "value":5, "timestamp":972654989})
            response = sqlrc.observation_put(observations)

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/observation/get :  Returns JSON observations for a given lookup query

        NOTES:
            - All JSON_OBJECT PARAMS are optional. You can send any combination to the request.

        JSON_OBJECT PARAMS:
            subject_bucket  : bucket name of the observation's subject
            subject_id      : subject's document identifier (string or list of strings)
            predicate       : predicate of the observation
            object_bucket   : bucket name of the observation's object
            object_id       : object's document identifier (string or list of strings)
            value           : value of the observation (value or range using value->start and value->end)
            timestamp       : timestamp of the observation (value or range using timestamp->start and timestamp->end)
            options->limit  : number of results to return (defaults to 10)
            option->offset  : number of the results to skip (starts at 0)

        EXAMPLE REQUEST:

            # All observations recorded for the "customers" subject_bucket.
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"subject_bucket":"customers"})

            # All observations recorded for the "customers" subject_bucket, specifically for subject_id is 001 or 002.
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"subject_bucket":"customers", "subject_id":["001","002"]})

            # All observations recorded where the predicate is "likes
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"predicate":"likes"})

            # All observations recorded where the value is between 3 and 5.
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"subject_bucket":"customers", "subject_id":"001", "value":{"start":3, "end":5}})

            # All observations recorded where the timestamp is between 972654980 and 972655000.
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"subject_bucket":"customers", "timestamp":{"start":972654980, "end":972655000}})

            # The first 10 observations recorded for the "customers" subject_bucket.
            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_get({"subject_bucket":"customers", "options":{"limit":10, "offset":0}})

        RESPONSE:

            [TBD - Yet To Be Documented]
            TODO: Explain record_count vs total_count ... i.e. # of documents returned / # of total docs available

        
#
# API ENDPOINT
#

/observation/remove <json_object> : Deletes observations based on a specific selection criteria.

        NOTES:
            - Similar to observation_get, in terms of the selection criteria.

        JSON_OBJECT PARAMS:
            subject_bucket  : bucket name of the observation's subject
            subject_id      : subject's document identifier (string or list of strings)
            predicate       : predicate of the observation
            object_bucket   : bucket name of the observation's object
            object_id       : object's document identifier (string or list of strings)
            value           : value of the observation (value or range using value->start and value->end)
            timestamp       : timestamp of the observation (value or range using timestamp->start and timestamp->end)

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_remove({"subject_bucket":"customers", "subject_id":"001"})

        RESPONSE:

            [TBD - Yet To Be Documented]

        
#
# API ENDPOINT
#

/observation/reset : Deletes ALL observations in the database.

        NOTES:
            - This is a very damaging call so it requires a lot of caution (So, have CAUTION!!!)

        JSON_OBJECT PARAMS:
            none

        EXAMPLE REQUEST:

            import sqlpie_client
            sqlrc = sqlpie_client.SQLpieClient("http://localhost:5000")
            response = sqlrc.observation_reset({})

        RESPONSE:

            [TBD - Yet To Be Documented]

        